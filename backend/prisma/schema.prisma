// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid()) @db.Uuid
  email        String    @unique
  passwordHash String    @map("password_hash")
  firstName    String    @map("first_name")
  lastName     String    @map("last_name")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  lastLogin    DateTime? @map("last_login")
  isActive     Boolean   @default(true) @map("is_active")

  // Relations
  accounts Account[]
  transactions Transaction[]
  categories Category[]

  @@map("users")
}

model Account {
  id            String   @id @default(uuid()) @db.Uuid
  userId        String   @map("user_id") @db.Uuid
  name          String
  accountType   String   @map("account_type") // checking, savings, credit, cash
  currency      String   @default("RSD") // RSD, EUR, USD
  balance       Decimal  @default(0) @db.Decimal(15, 2)
  bankName      String?  @map("bank_name")
  accountNumber String?  @map("account_number") // will be encrypted
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions  Transaction[] @relation("AccountTransactions")

  @@map("accounts")
}

model Transaction {
  id              String    @id @default(uuid()) @db.Uuid
  userId          String    @db.Uuid
  accountId       String    @db.Uuid
  categoryId      String?   @db.Uuid
  type            String
  amount          Decimal   @db.Decimal(10, 2)
  description     String
  transactionDate DateTime
  toAccountId     String?   @db.Uuid
  fromAccountId   String?   @db.Uuid
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user     User      @relation(fields: [userId], references: [id])
  account  Account   @relation("AccountTransactions", fields: [accountId], references: [id])
  category Category? @relation(fields: [categoryId], references: [id])

  @@index([userId, transactionDate])
  @@index([accountId])
}

model Category {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  name      String
  type      String   // income or expense
  icon      String?
  color     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id])
  transactions Transaction[]

  @@unique([userId, name])
  @@index([userId, type])
}